"""Add trigger

Revision ID: 1a3f5b653eb0
Revises: fdc0cc7eb447
Create Date: 2023-11-14 17:19:16.494884

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from alembic_utils.pg_function import PGFunction
from sqlalchemy import text as sql_text
from alembic_utils.pg_trigger import PGTrigger
from sqlalchemy import text as sql_text

# revision identifiers, used by Alembic.
revision: str = '1a3f5b653eb0'
down_revision: Union[str, None] = 'fdc0cc7eb447'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    public_delete_old_schedule = PGFunction(
        schema="public",
        signature="delete_old_schedule()",
        definition='returns trigger as \n    $$ \n    begin\n        delete from schedule \n        where end_time < NOW();\n        return new;\n    end\n    $$ language plpgsql'
    )
    op.create_entity(public_delete_old_schedule)

    public_schedule_check_old_schedule = PGTrigger(
        schema="public",
        signature="check_old_schedule",
        on_entity="public.schedule",
        is_constraint=False,
        definition='after insert or update on schedule\n    for each row execute function public.delete_old_schedule()'
    )
    op.create_entity(public_schedule_check_old_schedule)

    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    public_schedule_check_old_schedule = PGTrigger(
        schema="public",
        signature="check_old_schedule",
        on_entity="public.schedule",
        is_constraint=False,
        definition='after insert or update on schedule\n    for each row execute function public.delete_old_schedule()'
    )
    op.drop_entity(public_schedule_check_old_schedule)

    public_delete_old_schedule = PGFunction(
        schema="public",
        signature="delete_old_schedule()",
        definition='returns trigger as \n    $$ \n    begin\n        delete from schedule \n        where end_time < NOW();\n        return new;\n    end\n    $$ language plpgsql'
    )
    op.drop_entity(public_delete_old_schedule)

    # ### end Alembic commands ###
